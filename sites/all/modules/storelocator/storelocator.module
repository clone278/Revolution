<?php

/**
 * Implements hook_help().
 */
function storelocator_help($path, $arg) {
  switch ($path) {
    case 'admin/help#storelocator':
      $output = '<p>' . t('The Location Map module displays a map of your geographic location with Google Maps.') . ' ' .
        l(t('The page for the map'), 'storelocator') . ' ' . t('is automatically generated.') . ' ' .
        t('A block is also created that displays a thumbnail of the map, linking to the map page.') . ' ' .
        t('This can be assigned to a page region on the') . ' ' . l(t('block administration page'), 'admin/structure/block') . '.</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function storelocator_menu() {
  $items = array();
  $items['admin/config/content/storelocator'] = array(
    'title' => 'Store Locator',
    'description' => 'Configure Store Locator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storelocator_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer storelocator'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['storelocator'] = array('title' => 'Store Locations',
    'access callback' => TRUE,
    'page callback' => 'storelocator_page',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['storelocator/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['storelocator/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure Store Locator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storelocator_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer storelocator'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Callback for admin settings page
 */
function storelocator_admin_settings($form, &$form_state) {
  $path = drupal_get_path('module', 'storelocator');
  $storelocator_admin_css_options = array(
    'preprocess'  => FALSE,
  );

  drupal_add_css($path . '/storelocator_admin.css', $storelocator_admin_css_options);

  $defaults = array(
    'value' => '',
    'format' => filter_default_format(),
  );
  $storelocator_title = variable_get('storelocator_title', t('Store Locations'));
  $storelocator_info = variable_get('storelocator_info', $defaults);
  $storelocator_body = variable_get('storelocator_body', $defaults);
  $storelocator_footer = variable_get('storelocator_footer', $defaults);

  drupal_add_js($path . '/storelocator_admin.js');

  $form['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Location information'),
    '#collapsible' => FALSE,
  );

  $form['info']['storelocator_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => variable_get('storelocator_title', t('Store Locations')),
    '#description' => t("The title of the automatically generated ") . l(t('map page'), 'storelocator') . '.',
  );

  $form['info']['storelocator_address'] = array('#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Address of your location'),
    '#default_value' => variable_get('storelocator_address', ''),
    '#description' => t('Enter your address separated by commas. This will be sent to Google for geocoding to determine the geographical coordinates of your location. Include any suitable from: # Street, Suburb, City, Region/State, Postcode/Zip, Country.'),
  );

  $form['info']['storelocator_type'] = array(
    '#type' => 'select',
    '#title' => t('Map type'),
    '#default_value' => variable_get('storelocator_type', 'google.maps.MapTypeId.ROADMAP'),
    '#description' => NULL,
    '#options' => array(
      'google.maps.MapTypeId.ROADMAP' => 'the default view',
      'google.maps.MapTypeId.SATELLITE' => 'showing Google Earth satellite images',
      'google.maps.MapTypeId.HYBRID' => 'showing a mixture of normal and satellite views',
      'google.maps.MapTypeId.TERRAIN' => 'showing a physical map based on terrain information',
    ),
  );

  $zoom_levels = array('0' => t('0 - minimum zoom level, whole world'));
  for ($i = 1; $i < 17; $i++) {
    $zoom_levels["$i"] = "$i";
  }
  $zoom_levels['17'] = t('17 - maximum zoom level');

  $form['info']['storelocator_zoom'] = array('#type' => 'select',
    '#title' => t('Map zoom level'),
    '#default_value' => variable_get('storelocator_zoom', '15'),
    '#description' => NULL,
    '#options' => $zoom_levels,
  );

  $form['info']['storelocator_width'] = array('#type' => 'textfield',
    '#title' => t('Map Width'),
    '#default_value' => variable_get('storelocator_width', '500'),
    '#field_suffix' => 'px',
    '#description' => NULL,
    '#size' => 10,
  );

  $form['info']['storelocator_height'] = array('#type' => 'textfield',
    '#title' => t('Map Height'),
    '#default_value' => variable_get('storelocator_height', '500'),
    '#field_suffix' => 'px',
    '#description' => NULL,
    '#size' => 10,
  );

  $form['info']['latlng'] = array(
    '#type' => 'fieldset',
    '#title' => t('Geographical coordinates'),
    '#collapsible' => FALSE,
    '#description' => t('Geographical coordinates for your location. Store Locator will try to obtain this information from Google using the address above. You are also able to fine-tune this by dragging the marker on the' . ' ' . l(t('map page'), 'storelocator') . '. Under normal circumstances you would not set these coordinates manually.'),
  );

  $form['info']['latlng']['storelocator_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#default_value' => variable_get('storelocator_lat', '-46.0868686'),
  );

  $form['info']['latlng']['storelocator_lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#default_value' => variable_get('storelocator_lng', '166.6822074'),
  );

  $form['info']['storelocator_info'] = array(
    '#type' => 'text_format',
    '#title' => t('Marker Information'),
    '#default_value' => $storelocator_info['value'],
    '#format' => $storelocator_info['format'],
    '#description' => t('The description that will be shown when a user clicks on the marker. If this field is empty, the address will be used.'),
  );

  $form['info']['storelocator_body'] = array(
    '#type' => 'text_format',
    '#title' => t('Additional information (displayed above map)'),
    '#required' => FALSE,
    '#default_value' => $storelocator_body['value'],
    '#format' => $storelocator_body['format'],
    '#description' => t('Any additional information that you would like to include above the map.'),
  );

  $form['info']['storelocator_footer'] = array(
    '#type' => 'text_format',
    '#title' => t('Additional information (displayed below map)'),
    '#required' => FALSE,
    '#default_value' => $storelocator_footer['value'],
    '#format' => $storelocator_footer['format'],
    '#description' => t('Any additional information you would like to include below the map.'),
  );

  $form['#validate'][] = 'storelocator_admin_settings_validate';

  return system_settings_form($form);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function storelocator_admin_settings_validate($form, &$form_state) {
  if ($form_state['values']['storelocator_address']) {
    if ($form_state['values']['storelocator_address'] == variable_get('storelocator_address', '')) {
      drupal_set_message('Address has not changed. In order to preserve any location marker fine-tuning, coordinates have not been updated.', 'status');
      return;
    }
    $latlng = storelocator_geocode_for_address_recursive($form_state['values']['storelocator_address']);
    if ($latlng != FALSE) {
      list($lat, $lng) = $latlng;
      $form_state['values']['storelocator_lat'] = $lat;
      $form_state['values']['storelocator_lng'] = $lng;
    }
    else {
      switch ($form_state['values']['storelocator_lat']) {
        // If Geocoding fails and there are no previous coordinates, set to the default: Round Island in New Zealand's Fiordland National Park.
        case '':
          $form_state['values']['storelocator_lat'] = '-46.0868686';
          $form_state['values']['storelocator_lng'] = '166.6822074';
          drupal_set_message('Unable to Geocode address provided. As no previous coordinates were recorded, default values have been inserted. Try slightly modifying the address and resubmit, e.g. giving more or less detail, such as leaving out the suburb or state.', 'warning');
          break;
          // If Geocoding fails and there are previous coordinates, set to those coordinates.
        default:
          $form_state['values']['storelocator_lat'] = variable_get('storelocator_lat', '-46.0868686');
          $form_state['values']['storelocator_lng'] = variable_get('storelocator_lng', '166.6822074');
          drupal_set_message('Unable to Geocode address provided&mdash;previous coordinates will be used. Try slightly modifying the address and resubmit, e.g. giving more detail, or leaving out the suburb or state.', 'warning');
          break;
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function storelocator_permission() {
  return array(
    'administer storelocator' => array(
      'title' => t('administer storelocator'),
      'description' => t('Modify the address and change settings for the Store Locator.'),
    ),
  );
}

/**
 * Menu callback; generate a page with the Store Locator.
 */
function storelocator_page() {
  $defaults = array(
    'value' => '',
    'format' => filter_default_format(),
  ); 
  $storelocator_info_defaults = array(
    'value' => 'Fiordland, New Zealand',
    'format' => filter_default_format(),
  ); 
  $storelocator_title = variable_get('storelocator_title', t('Our Location'));
  $storelocator_info = variable_get('storelocator_info', $storelocator_info_defaults);
  $storelocator_body = variable_get('storelocator_body', $defaults);
  $storelocator_footer = variable_get('storelocator_footer', $defaults);

  $path = drupal_get_path('module', 'storelocator');

  drupal_add_js('//maps.google.com/maps/api/js?key=AIzaSyCkP7DM8dsc9Z6x1f1p093ZQHjQY_kmVhk&v=3&sensor=false',  array('type' => 'external', 'weight' => 5));
  drupal_add_js($path . '/storelocator.js', array('type' => 'file', 'weight' => 6, 'scope' => 'footer'));
    // bjb added this
  drupal_add_js($path . '/js/mapbox-gl.js', array('type' => 'file', 'weight' => 6, 'scope' => 'header'));

  $storelocator_css_options = array(
    'preprocess'  => FALSE,
  );
  drupal_add_css($path . '/storelocator.css', $storelocator_css_options);
  // bjb added this
  $storelocator_css_options = array(
    'preprocess'  => TRUE,
  );
  drupal_add_css($path . '/css/mapbox-gl.css', $storelocator_css_options);

  $storelocator_settings = array(
    'address' => variable_get('storelocator_address', 'Fiordland, New Zealand'),
    'info' => $storelocator_info['value'],
    'lat' => variable_get('storelocator_lat', '-46.0868686'),
    'lng' => variable_get('storelocator_lng', '166.6822074'),
    'zoom' => variable_get('storelocator_zoom', 10),
    'type' => variable_get('storelocator_type', 'google.maps.MapTypeId.ROADMAP'),
    'admin' => user_access('administer storelocator'),
  );
  if (!$storelocator_settings['info']) {
    $storelocator_settings['info'] = $storelocator_settings['address'];
  }

  drupal_add_js(array('storelocator' => $storelocator_settings), 'setting');

  $output = '<div id="storelocator_body">' . $storelocator_body['value'] . '</div>';
  $output .= theme('storelocator_map');
  $output .= '<div id="storelocator_footer">' . $storelocator_footer['value'] . '</div>';



  if (user_access('administer storelocator')) {
    // TODO: Remove drupal_render and update to D7 desired behaviour. See http://drupal.org/update/modules/6/7#unrendered
    $form = drupal_get_form('storelocator_in_place_edit_form');
    $output .= drupal_render($form);
  }

  drupal_set_title($storelocator_title);

  return $output;
}


/**
 * Returns latitude and longitude for $address or NULL if it cannot be found.
 * @returns FALSE if address not found
 */
function storelocator_geocode_for_address($address) {

  $url_options = array(
    'query' => array(
      'sensor' => 'false',
      'address' => $address
    ),
  );

  $options = array(
    'max_redirects' => 10,
    'timeout' => 120, 
  );

  $response = drupal_http_request(url('http://maps.googleapis.com/maps/api/geocode/json', $url_options), $options);

  if ($response->code != 200) {
    return FALSE;
  }

  $data = json_decode($response->data);
  $location = $data->results[0]->geometry->location;
  return array($location->lat, $location->lng);
}

/**
 * Try to get lat and lng information from address removing parts of address if not found.
 */
function storelocator_geocode_for_address_recursive($address) {
  while (TRUE) {
    $latlng = storelocator_geocode_for_address($address);
    if ($latlng) {
      return($latlng);
    }
    if (strpos($address, ',') === FALSE) {
      return (FALSE);
    }
    $address = preg_replace('/[^,]+,/', '', $address, 1);
  }
  return (FALSE);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function storelocator_in_place_edit_form($form, &$form_state) {
  $form['#submit'][] = 'system_settings_form_submit';
  $form['description'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Click and drag marker to fine tune position of your location. Set zoom level below.'),
    '#suffix' => '</p>',
    );
  $form['storelocator_lat'] = array('#type' => 'textfield',
	'#title' => t('Latitude'),
    '#default_value' => variable_get('storelocator_lat', ''),
    );
  $form['storelocator_lng'] = array('#type' => 'textfield',
	'#title' => t('Longitude'),
    '#default_value' => variable_get('storelocator_lng', ''),
    );
  $form['storelocator_zoom'] = array('#type' => 'textfield',
	'#title' => t('Zoom level'),
    '#default_value' => variable_get('storelocator_zoom', ''),
    );
  $form['submit'] = array(
  	'#type' => 'submit',
    '#value' => t('Save new location and zoom level'),
  );
  return($form);
}

/**
 * Implements hook_simpletest().
 */
function storelocator_simpletest() {
  // Scan through mymodule/tests directory for any .test files to tell SimpleTest module.
  $tests = file_scan_directory(drupal_get_path('module', 'storelocator') . '/tests', '/\.test/');
  return array_keys($tests);
}

/**
 * Implements hook_block_info().
 */
function storelocator_block_info() {
  $blocks['image']['info'] = t('Store Locator block');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function storelocator_block_configure($delta) {
  $form = array();
  switch ($delta) {
    case 'image':
      $form['info']['storelocator_block_type'] = array(
        '#type' => 'radios',
        '#title' => t('Map type'),
        '#description' => t("Select the type of map you'd like this block to display."),
        '#default_value' => variable_get('storelocator_block_type', 'image'),
        '#options' => array(
          'image' => t('Static image'),
          'interactive' => t('Interactive map'),
        ),
      );
      $form['info']['storelocator_block_mapwidth'] = array(
        '#type' => 'textfield',
        '#title' => t('Block map width'),
        '#description' => t('Provide the width of the block map in pixels'),
        '#default_value' => variable_get('storelocator_block_mapwidth', '160'),
        '#field_suffix' => 'px',
        '#description' => NULL,
        '#size' => 10,
      );
      $form['info']['storelocator_block_mapheight'] = array(
        '#type' => 'textfield',
        '#title' => t('Block map height'),
        '#description' => t('Provide the height of the block map in pixels'),
        '#default_value' => variable_get('storelocator_block_mapheight', '120'),
        '#field_suffix' => 'px',
        '#description' => NULL,
        '#size' => 10,
      );
      $form['info']['storelocator_text_top'] = array(
        '#type' => 'text_format',
        '#title' => t('Additional text to show above the image'),
        '#default_value' => variable_get('storelocator_block_text_top'),
        '#format' => isset($edit['format']) ? $edit['format'] : NULL,
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function storelocator_block_save($delta, $edit) {
  switch ($delta) {
    case 'image':
      variable_set('storelocator_block_type', $edit['storelocator_block_type']);
      variable_set('storelocator_block_mapheight', (int)$edit['storelocator_block_mapheight']);
      variable_set('storelocator_block_mapwidth', (int)$edit['storelocator_block_mapwidth']);
      variable_set('storelocator_block_text_top', $edit['storelocator_text_top']['value']);
    break;
  }
}

/**
 * Implements hook_block_view().
 */
function storelocator_block_view($delta) {
  switch ($delta) {
    case 'image':
      $texttop = variable_get('storelocator_block_text_top');
      $blocktop = ($texttop) ? '<div id="storelocator-block-text-top">' . $texttop . '</div>' : '';
      $block = storelocator_block_image();
      $block['content'] = $blocktop . $block['content'];
      break;
  }
  return $block;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function storelocator_static_image_url($w = 200, $h = 150) {
  $image_url = '//maps.googleapis.com/maps/api/staticmap?zoom=' . variable_get('storelocator_zoom', 5);
  $image_url .= "&amp;size={$w}x{$h}";
  $image_url .= '&amp;markers=' . variable_get('storelocator_lat', 0) . ',' . variable_get('storelocator_lng', 0);
  $image_url .= "&amp;sensor=false";
  return($image_url);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function storelocator_block_image() {
  $type = variable_get('storelocator_block_type', 'image');
  $block = array();
  $block['subject'] = variable_get('storelocator_title', t('Our Location'));

  if ($type == 'interactive') {
    $width = variable_get('storelocator_block_mapwidth', 160);
    $height = variable_get('storelocator_block_mapheight', 120);
    $path = drupal_get_path('module', 'storelocator');
    drupal_add_js('//maps.google.com/maps/api/js?key=AIzaSyCkP7DM8dsc9Z6x1f1p093ZQHjQY_kmVhk&v=3&sensor=false',  array('type' => 'external', 'weight' => 5));
    drupal_add_js($path . '/storelocator.js', array('type' => 'file', 'weight' => 6, 'scope' => 'footer'));
    $storelocator_settings = array(
      'address' => variable_get('storelocator_address', 'Fiordland, New Zealand'),
      'info' => variable_get('storelocator_info', 'Fiordland, New Zealand'),
      'lat' => variable_get('storelocator_lat', '-46.0868686'),
      'lng' => variable_get('storelocator_lng', '166.6822074'),
      'zoom' => variable_get('storelocator_zoom', 10),
      'type' => variable_get('storelocator_type', 'G_NORMAL_MAP'),
      'admin' => user_access('administer storelocator'),
    );
    if (!$storelocator_settings['info']) {
      $storelocator_settings['info'] = $storelocator_settings['address'];
    }
    drupal_add_js(array('storelocator' => $storelocator_settings), 'setting');
    $block['content'] = theme('storelocator_map', array('width' => $width, 'height' => $height));
  } else {
    $block['content'] = theme('storelocator_block_image_link');
  }

  return($block);
}

/**
 * Implements hook_token_info().
 */
function storelocator_token_info() {
  $types = array(
    'storelocator' => array(
      'name' =>  t('Store Locator'),
      'description' => t('Tokens provided by the Store Locator module.'),
    ),
  );

  $tokens['latitude'] = array(
    'name' => t('Latitude'),
    'description' => t('Latitude of map marker.'),
  );
  $tokens['longitude'] = array(
    'name' => t('Longitude'),
    'description' => t('Longitude of map marker.'),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'storelocator' => $tokens,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function storelocator_tokens($type, $tokens, array $data = array(), array $options = array()){
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'storelocator') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'latitude':
          $lat = variable_get('storelocator_lat');
          $replacements[$original] = $sanitize ? check_plain($lat) : $lat;
          break;
        case 'longitude':
          $lat = variable_get('storelocator_lng');
          $replacements[$original] = $sanitize ? check_plain($lat) : $lat;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Format static image for display in the block.
 * @ingroup themeable
 */
function theme_storelocator_block_image_link() {
  $mapwidth = variable_get('storelocator_block_mapwidth', 160);
  $mapheight = variable_get('storelocator_block_mapheight', 120);
  return(l('<img src="' . storelocator_static_image_url($mapwidth, $mapheight) . '" alt="Store map" />', 'storelocator', array('html' => TRUE)));
}

/**
 * Format div to display a Store Locator.
 *
 * @ingroup themeable
 */
function theme_storelocator_map($variables) {

  if (empty($variables['width'])) {
    $width = variable_get('storelocator_width', '500') . 'px';
  } else {
    $width = $variables['width'] . 'px';
  }
  if (empty($variables['height'])) {
    $height = variable_get('storelocator_height', '500') . 'px';
  } else {
    $height = $variables['height'] . 'px';
  }

  $output = '<div class="storelocator">';
  $output .= '<div class="sidebar">';
  $output .= '<div class="heading section-head">';
  $output .= '<h4>Attractions</h4>';
  $output .= '</div>';
  $output .= '<div id="storelocator_listings" class="listings"></div>';
  $output .= '<div class="filter-ctrl">';
  $output .= '<label for="filter-input">Filter:</label>';
  $output .= '<input id="filter-input" type="text" name="filter" placeholder="Filter by tag" />';
  $output .= '</div>';
  $output .= '</div>';
  $output .= '<div id="storelocator_map" style="position: absolute;"" class="map"> </div>';
  $output .= '</div>';  

  /*
  $output = '<div id="storelocator_map" style="width: ' . $width . '; height: ' . $height . '"></div>';
  $output .= theme('storelocator_map');
  $output .= '<div id="storelocator_footer">' . $storelocator_footer['value'] . '</div>';*/

  return ($output);
}

/**
 * Implements hook_theme().
 */
function storelocator_theme() {
  return array(
    'storelocator_block_image_link' => array(),
    'storelocator_map' => array(
      'variables' => array(
        'width' => NULL,
        'height' => NULL,
      ),
    ),
  );
}
